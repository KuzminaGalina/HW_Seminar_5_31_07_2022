# 3-Создайте два списка — один с названиями языков программирования, другой — с числами от 1 до длины первого.
# ['python', 'c#']
# [1,2]
# Вам нужно сделать две функции: первая из которых создаст список кортежей, состоящих из номера и языка, написанного большими буквами.
# [(1,'PYTHON'), (2,'C#')]
# Вторая — которая отфильтрует этот список следующим образом: если сумма очков слова имеет в делителях номер, 
# с которым она в паре в кортеже, то кортеж остается, его номер заменяется на сумму очков.
# [сумма очков c# = 102, в делителях есть 2 с которым в паре. Значит список будет]
# [(1,'PYTHON'), (102,'C#')]
# Если нет — удаляется. Суммой очков называется сложение порядковых номеров букв в слове. 
# Порядковые номера смотрите в этой таблице, в третьем столбце: https://www.charset.org/utf-8
# Это — 16-ричная система, поищите, как правильнее и быстрее получать эти символы.
# Cложите получившиеся числа и верните из функции в качестве ответа вместе с преобразованным списком

def two_listes(string):
    lst_lenguages = [line.strip().upper() for line in open (f'{string}')]
    lst_number = [x for x in range(1,len(lst_lenguages))]
    return [(lst_number[i], lst_lenguages[i]) for i in range(0,len(lst_lenguages)-1)]

def lenguages_point(list):
    result = []
    sum = 0
    for element in list:
        temp = 0
        for char in element[1]:
            temp += ord(char)
        if temp%element[0] == 0:
            result.append((temp, element[1]))
            sum += temp
    return [sum, result]
        
print(two_listes("languages.txt"))
print("_____________________________________________")
print(lenguages_point(two_listes("languages.txt")))



